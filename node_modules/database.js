var ip_addr = process.env.OPENSHIFT_NODEJS_IP   || '127.0.0.1';
var port    = process.env.OPENSHIFT_NODEJS_PORT || '8080';

// default to a 'localhost' configuration:
var connection_string = '127.0.0.1:27017/dp';
// if OPENSHIFT env variables are present, use the available connection info:
if(process.env.OPENSHIFT_MONGODB_DB_PASSWORD){
  connection_string = process.env.OPENSHIFT_MONGODB_DB_USERNAME + ":" +
  process.env.OPENSHIFT_MONGODB_DB_PASSWORD + "@" +
  process.env.OPENSHIFT_MONGODB_DB_HOST + ':' +
  process.env.OPENSHIFT_MONGODB_DB_PORT + '/' +
  process.env.OPENSHIFT_APP_NAME;
}

var mongojs = require('mongojs');
var db = mongojs(connection_string, ['armindex']);
var armindex = db.collection('armindex');

var fs = require('fs');
var file = __dirname + '/dbdata.json';

//Read file with JSON data and SAVE in mongoDB dp/armindex
fs.readFile(file, 'utf8', function (err, db_data) {
  if (err) {
    console.log('Error! Could not read data file: ' + err);
    return;
  }

  arm_index_data = JSON.parse(db_data);
  arm_index_data.forEach(function(save_arm_index){ 
  	//Ensure unique combination of sender_id and time, drop duplicate entries
  	db.armindex.ensureIndex( { time: 1, sender_id: 1 }, { unique: true, dropDups: true } );
    db.armindex.save(save_arm_index, function(err, savedRecord){
    	if(err || !savedRecord) console.log("Not saved, duplicate entries!");
		else console.log("Record:" +savedRecord._id);
    });
  })
});


//FIND in mongoDB dp/armindex
//Sort by sender_id and get 100 values of data
db.armindex.find({ _id: 0}).sort({sender_id: 1}).limit(100).forEach(function(err, record) {
  if (err) throw err;
  if (record) { console.dir(record); }
});
//http://docs.mongodb.org/manual/reference/method/db.collection.group/
